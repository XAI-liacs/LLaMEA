{"id": "439c9377-df89-4168-8cea-87f6d86656f9", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 10 + 2 * dim\n        self.c1 = 2.0  # cognitive coefficient\n        self.c2 = 2.0  # social coefficient\n        self.w = 0.7  # inertia weight\n        self.mutation_factor = 0.8\n        self.recombination_rate = 0.9\n        self.particles = None\n        self.velocities = None\n        self.local_best = None\n        self.global_best = None\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.particles = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        fitness = np.array([func(x) for x in self.particles])\n        self.local_best = self.particles.copy()\n        self.global_best = self.particles[np.argmin(fitness)]\n        local_best_fitness = fitness.copy()\n        global_best_fitness = np.min(fitness)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Update PSO velocities and positions\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            self.velocities = (self.w * self.velocities +\n                               self.c1 * r1 * (self.local_best - self.particles) +\n                               self.c2 * r2 * (self.global_best - self.particles))\n            self.particles = self.particles + self.velocities\n            self.particles = np.clip(self.particles, lb, ub)\n\n            # Evaluate new positions\n            new_fitness = np.array([func(x) for x in self.particles])\n            evaluations += self.population_size\n\n            # Update local and global bests\n            for i in range(self.population_size):\n                if new_fitness[i] < local_best_fitness[i]:\n                    local_best_fitness[i] = new_fitness[i]\n                    self.local_best[i] = self.particles[i]\n                if new_fitness[i] < global_best_fitness:\n                    global_best_fitness = new_fitness[i]\n                    self.global_best = self.particles[i]\n\n            # Apply DE mutation and crossover\n            for i in range(self.population_size):\n                indices = list(range(self.population_size))\n                indices.remove(i)\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = self.particles[a] + self.mutation_factor * (self.particles[b] - self.particles[c])\n                mutant = np.clip(mutant, lb, ub)\n                crossover = np.random.rand(self.dim) < self.recombination_rate\n                trial_vector = np.where(crossover, mutant, self.particles[i])\n\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n                if trial_fitness < new_fitness[i]:\n                    self.particles[i] = trial_vector\n                    new_fitness[i] = trial_fitness\n                    if trial_fitness < local_best_fitness[i]:\n                        local_best_fitness[i] = trial_fitness\n                        self.local_best[i] = trial_vector\n                    if trial_fitness < global_best_fitness:\n                        global_best_fitness = trial_fitness\n                        self.global_best = trial_vector\n\n        return self.global_best", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) and Differential Evolution (DE) algorithm dynamically balances exploration and exploitation using historical performance data.", "configspace": "", "generation": 0, "fitness": 0.8296011598194024, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.830 with standard deviation 0.011. And the mean value of best solutions found was 0.133 (0. is the best) with standard deviation 0.007.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8165479159153856, 0.8426764096857092, 0.8295791538571126], "final_y": [0.14047322738022483, 0.1348446425819445, 0.12306739078754148]}, "mutation_prompt": null}
