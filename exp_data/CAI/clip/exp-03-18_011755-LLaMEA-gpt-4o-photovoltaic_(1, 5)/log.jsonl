{"id": "af74577e-1bcb-4f20-a9cb-a5fa71def359", "solution": "import numpy as np\n\nclass AdaptiveQuantumSwarmOptimization:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = min(50, budget // 2)\n        self.particles = np.random.uniform(size=(self.population_size, dim))\n        self.velocities = np.random.uniform(size=(self.population_size, dim))\n        self.personal_best = np.copy(self.particles)\n        self.global_best = None\n        self.best_value = float('inf')\n        self.evaluations = 0\n\n    def __call__(self, func):\n        bounds = (func.bounds.lb, func.bounds.ub)\n        while self.evaluations < self.budget:\n            for i in range(self.population_size):\n                position = self.particles[i]\n                # Quantum-inspired position update\n                quantum_factor = np.random.uniform(size=self.dim)\n                new_position = (\n                    position\n                    + np.sin(quantum_factor * np.pi) * self.velocities[i]\n                    + np.cos(quantum_factor * np.pi) * (self.global_best - position)\n                )\n                new_position = np.clip(new_position, bounds[0], bounds[1])\n\n                # Evaluate new position\n                value = func(new_position)\n                self.evaluations += 1\n\n                # Update personal and global bests\n                if value < self.best_value:\n                    self.global_best = new_position\n                    self.best_value = value\n                if value < func(self.personal_best[i]):\n                    self.personal_best[i] = new_position\n\n                # Velocity update\n                inertia = 0.5 + np.random.rand() / 2\n                cognitive = np.random.rand() * (self.personal_best[i] - position)\n                social = np.random.rand() * (self.global_best - position)\n                self.velocities[i] = inertia * self.velocities[i] + cognitive + social\n\n                # Update particle position\n                self.particles[i] = new_position\n\n        return self.global_best", "name": "AdaptiveQuantumSwarmOptimization", "description": "This novel metaheuristic algorithm, called Adaptive Quantum Swarm Optimization (AQSO), combines concepts from quantum computing and particle swarm optimization to dynamically adapt search strategies for efficient exploration and exploitation in black-box optimization.", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 194, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 288, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/scratch/hyin/LLaMEA/benchmarks/tuto_global_optimization_photonics/exp_photonic.py\", line 149, in evaluatePhotonic\n    algorithm(problem)\n  File \"<string>\", line 25, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n.", "error": "TypeError(\"unsupported operand type(s) for -: 'NoneType' and 'float'\")Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 194, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 288, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/scratch/hyin/LLaMEA/benchmarks/tuto_global_optimization_photonics/exp_photonic.py\", line 149, in evaluatePhotonic\n    algorithm(problem)\n  File \"<string>\", line 25, in __call__\nTypeError: unsupported operand type(s) for -: 'NoneType' and 'float'\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
