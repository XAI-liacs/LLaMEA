{"id": "0b6cb531-379c-42ae-b491-0491e6e0a354", "solution": "import numpy as np\n\nclass HybridHarmonyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par = 0.3   # Pitch Adjusting Rate\n        self.f = 0.5     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(\n            low=func.bounds.lb, high=func.bounds.ub, size=(self.harmony_memory_size, self.dim)\n        )\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        evaluations = self.harmony_memory_size\n        \n        # Optimization loop\n        while evaluations < self.budget:\n            # Generate new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Pitch adjustment\n                        new_harmony[i] += np.random.uniform(-1, 1) * (func.bounds.ub[i] - func.bounds.lb[i]) * 0.01\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(func.bounds.lb[i], func.bounds.ub[i])\n\n            new_harmony = np.clip(new_harmony, func.bounds.lb, func.bounds.ub)\n            new_harmony_fitness = func(new_harmony)\n            evaluations += 1\n\n            # Differential Evolution\n            if evaluations < self.budget:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                x1, x2, x3 = harmony_memory[idxs]\n                mutant_vector = x1 + self.f * (x2 - x3)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, new_harmony)\n                trial_vector = np.clip(trial_vector, func.bounds.lb, func.bounds.ub)\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Select the best solution\n                if trial_fitness < new_harmony_fitness:\n                    new_harmony, new_harmony_fitness = trial_vector, trial_fitness\n\n            # Update harmony memory if new harmony is better\n            worst_idx = np.argmax(harmony_fitness)\n            if new_harmony_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_harmony_fitness\n\n        # Return the best solution found\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonyDifferentialEvolution", "description": "A hybrid harmony search and differential evolution algorithm that combines global exploration with local exploitation to efficiently optimize black box functions within given budget constraints.", "configspace": "", "generation": 0, "fitness": 0.1869734850737718, "feedback": "The algorithm HybridHarmonyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.187 with standard deviation 0.041. And the mean value of best solutions found was 0.302 (0. is the best) with standard deviation 0.318.", "error": "", "parent_id": null, "metadata": {"aucs": [0.23955574861062034, 0.18204228615541107, 0.13932242045528398], "final_y": [0.06757480468435928, 0.08709608939099321, 0.750946027055325]}, "mutation_prompt": null}
{"id": "48240291-4fa3-46a2-96f5-a9306213d002", "solution": "import numpy as np\n\nclass HybridHarmonyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par = 0.3   # Pitch Adjusting Rate\n        self.f = 0.5     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(\n            low=func.bounds.lb, high=func.bounds.ub, size=(self.harmony_memory_size, self.dim)\n        )\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        evaluations = self.harmony_memory_size\n        \n        # Optimization loop\n        while evaluations < self.budget:\n            # Generate new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Adaptive Pitch adjustment\n                        adapt_factor = 1 - (evaluations / self.budget)\n                        new_harmony[i] += np.random.uniform(-1, 1) * (func.bounds.ub[i] - func.bounds.lb[i]) * 0.01 * adapt_factor\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(func.bounds.lb[i], func.bounds.ub[i])\n\n            new_harmony = np.clip(new_harmony, func.bounds.lb, func.bounds.ub)\n            new_harmony_fitness = func(new_harmony)\n            evaluations += 1\n\n            # Differential Evolution\n            if evaluations < self.budget:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                x1, x2, x3 = harmony_memory[idxs]\n                mutant_vector = x1 + self.f * (x2 - x3)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, new_harmony)\n                trial_vector = np.clip(trial_vector, func.bounds.lb, func.bounds.ub)\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Select the best solution\n                if trial_fitness < new_harmony_fitness:\n                    new_harmony, new_harmony_fitness = trial_vector, trial_fitness\n\n            # Update harmony memory if new harmony is better\n            worst_idx = np.argmax(harmony_fitness)\n            if new_harmony_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_harmony_fitness\n\n        # Return the best solution found\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonyDifferentialEvolution", "description": "A hybrid harmony search and differential evolution algorithm with adaptive pitch adjustment to optimize black box functions efficiently within budget constraints.", "configspace": "", "generation": 1, "fitness": 0.28432088132688055, "feedback": "The algorithm HybridHarmonyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.284 with standard deviation 0.114. And the mean value of best solutions found was 0.288 (0. is the best) with standard deviation 0.405.", "error": "", "parent_id": "0b6cb531-379c-42ae-b491-0491e6e0a354", "metadata": {"aucs": [0.28086803719490316, 0.4257847633748343, 0.14630984341090425], "final_y": [0.00377296837570191, 0.0006788518764079074, 0.8609311089730469]}, "mutation_prompt": null}
{"id": "1e868ff3-7c5e-49ce-91bd-582875b8930d", "solution": "import numpy as np\n\nclass HybridHarmonyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par = 0.3   # Pitch Adjusting Rate\n        self.f = 0.5     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(\n            low=func.bounds.lb, high=func.bounds.ub, size=(self.harmony_memory_size, self.dim)\n        )\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        evaluations = self.harmony_memory_size\n        \n        # Optimization loop\n        while evaluations < self.budget:\n            # Generate new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Adaptive Pitch adjustment\n                        adapt_factor = 1 - (evaluations / self.budget)\n                        new_harmony[i] += np.random.uniform(-1, 1) * (func.bounds.ub[i] - func.bounds.lb[i]) * 0.01 * adapt_factor\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(func.bounds.lb[i], func.bounds.ub[i])\n\n            new_harmony = np.clip(new_harmony, func.bounds.lb, func.bounds.ub)\n            new_harmony_fitness = func(new_harmony)\n            evaluations += 1\n\n            # Differential Evolution\n            if evaluations < self.budget:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                x1, x2, x3 = harmony_memory[idxs]\n                self.f = 0.5 + 0.5 * (1 - evaluations / self.budget)  # Learning factor adjustment\n                mutant_vector = x1 + self.f * (x2 - x3)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, new_harmony)\n                trial_vector = np.clip(trial_vector, func.bounds.lb, func.bounds.ub)\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Select the best solution\n                if trial_fitness < new_harmony_fitness:\n                    new_harmony, new_harmony_fitness = trial_vector, trial_fitness\n\n            # Update harmony memory if new harmony is better\n            worst_idx = np.argmax(harmony_fitness)\n            if new_harmony_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_harmony_fitness\n\n        # Return the best solution found\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonyDifferentialEvolution", "description": "Integrate a learning factor adjustment to enhance the exploration-exploitation balance in the hybrid harmony and differential evolution algorithm.", "configspace": "", "generation": 2, "fitness": 0.30829346870765206, "feedback": "The algorithm HybridHarmonyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.308 with standard deviation 0.090. And the mean value of best solutions found was 0.094 (0. is the best) with standard deviation 0.133.", "error": "", "parent_id": "48240291-4fa3-46a2-96f5-a9306213d002", "metadata": {"aucs": [0.391069970518348, 0.18245986513396428, 0.3513505704706439], "final_y": [1.927497447651436e-07, 0.2817434961762621, 0.000585835560720372]}, "mutation_prompt": null}
{"id": "ef7b1c9e-d75c-4f72-824b-0517277eef97", "solution": "import numpy as np\n\nclass HybridHarmonyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par = 0.3   # Pitch Adjusting Rate\n        self.f = 0.5     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(\n            low=func.bounds.lb, high=func.bounds.ub, size=(self.harmony_memory_size, self.dim)\n        )\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        evaluations = self.harmony_memory_size\n        \n        # Optimization loop\n        while evaluations < self.budget:\n            # Generate new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Adaptive Pitch adjustment\n                        adapt_factor = 1 - (evaluations / self.budget)\n                        new_harmony[i] += np.random.uniform(-1, 1) * (func.bounds.ub[i] - func.bounds.lb[i]) * 0.01 * adapt_factor\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(func.bounds.lb[i], func.bounds.ub[i])\n\n            new_harmony = np.clip(new_harmony, func.bounds.lb, func.bounds.ub)\n            new_harmony_fitness = func(new_harmony)\n            evaluations += 1\n\n            # Differential Evolution\n            if evaluations < self.budget:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                x1, x2, x3 = harmony_memory[idxs]\n                self.f = 0.5 + 0.5 * (1 - evaluations / self.budget)  # Learning factor adjustment\n                mutant_vector = x1 + self.f * (x2 - x3)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr * (1 - evaluations / self.budget), mutant_vector, new_harmony)\n                trial_vector = np.clip(trial_vector, func.bounds.lb, func.bounds.ub)\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Select the best solution\n                if trial_fitness < new_harmony_fitness:\n                    new_harmony, new_harmony_fitness = trial_vector, trial_fitness\n\n            # Update harmony memory if new harmony is better\n            worst_idx = np.argmax(harmony_fitness)\n            if new_harmony_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_harmony_fitness\n\n        # Return the best solution found\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonyDifferentialEvolution", "description": "Introduce a decay factor to dynamically adjust the Crossover probability for improved exploration-exploitation trade-off.", "configspace": "", "generation": 3, "fitness": 0.18406644011450612, "feedback": "The algorithm HybridHarmonyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.184 with standard deviation 0.043. And the mean value of best solutions found was 0.644 (0. is the best) with standard deviation 0.531.", "error": "", "parent_id": "1e868ff3-7c5e-49ce-91bd-582875b8930d", "metadata": {"aucs": [0.24343489950552555, 0.14327821300287347, 0.16548620783511936], "final_y": [0.0076524445568089934, 1.3080801548749315, 0.6158857158697094]}, "mutation_prompt": null}
{"id": "a642df26-3851-4a6a-b349-37607aa27805", "solution": "import numpy as np\n\nclass HybridHarmonyDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.harmony_memory_size = 10\n        self.hmcr = 0.9  # Harmony Memory Considering Rate\n        self.par = 0.3   # Pitch Adjusting Rate\n        self.f = 0.5     # Differential weight\n        self.cr = 0.9    # Crossover probability\n\n    def __call__(self, func):\n        # Initialize harmony memory\n        harmony_memory = np.random.uniform(\n            low=func.bounds.lb, high=func.bounds.ub, size=(self.harmony_memory_size, self.dim)\n        )\n        harmony_fitness = np.array([func(hm) for hm in harmony_memory])\n        evaluations = self.harmony_memory_size\n        \n        # Optimization loop\n        while evaluations < self.budget:\n            # Generate new harmony\n            new_harmony = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    # Memory consideration\n                    new_harmony[i] = harmony_memory[np.random.randint(self.harmony_memory_size), i]\n                    if np.random.rand() < self.par:\n                        # Adaptive Pitch adjustment with dynamic PAR\n                        adapt_factor = 1 - (evaluations / self.budget)\n                        self.par = 0.1 + 0.2 * adapt_factor  # Dynamic adjustment \n                        new_harmony[i] += np.random.uniform(-1, 1) * (func.bounds.ub[i] - func.bounds.lb[i]) * 0.01 * adapt_factor\n                else:\n                    # Random selection\n                    new_harmony[i] = np.random.uniform(func.bounds.lb[i], func.bounds.ub[i])\n\n            new_harmony = np.clip(new_harmony, func.bounds.lb, func.bounds.ub)\n            new_harmony_fitness = func(new_harmony)\n            evaluations += 1\n\n            # Differential Evolution\n            if evaluations < self.budget:\n                idxs = np.random.choice(self.harmony_memory_size, 3, replace=False)\n                x1, x2, x3 = harmony_memory[idxs]\n                self.f = 0.5 + 0.5 * (1 - evaluations / self.budget)  # Learning factor adjustment\n                mutant_vector = x1 + self.f * (x2 - x3)\n                trial_vector = np.where(np.random.rand(self.dim) < self.cr, mutant_vector, new_harmony)\n                trial_vector = np.clip(trial_vector, func.bounds.lb, func.bounds.ub)\n                trial_fitness = func(trial_vector)\n                evaluations += 1\n\n                # Select the best solution\n                if trial_fitness < new_harmony_fitness:\n                    new_harmony, new_harmony_fitness = trial_vector, trial_fitness\n\n            # Update harmony memory if new harmony is better\n            worst_idx = np.argmax(harmony_fitness)\n            if new_harmony_fitness < harmony_fitness[worst_idx]:\n                harmony_memory[worst_idx] = new_harmony\n                harmony_fitness[worst_idx] = new_harmony_fitness\n\n        # Return the best solution found\n        best_idx = np.argmin(harmony_fitness)\n        return harmony_memory[best_idx]", "name": "HybridHarmonyDifferentialEvolution", "description": "Integrate a dynamic adjustment to the pitch adjusting rate (PAR) for improved adaptability.", "configspace": "", "generation": 4, "fitness": 0.2752386875808751, "feedback": "The algorithm HybridHarmonyDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.275 with standard deviation 0.010. And the mean value of best solutions found was 0.011 (0. is the best) with standard deviation 0.002.", "error": "", "parent_id": "1e868ff3-7c5e-49ce-91bd-582875b8930d", "metadata": {"aucs": [0.2836480028763583, 0.2611484337176563, 0.28091962614861077], "final_y": [0.008897474185715685, 0.012697260868280635, 0.012058517472573188]}, "mutation_prompt": null}
