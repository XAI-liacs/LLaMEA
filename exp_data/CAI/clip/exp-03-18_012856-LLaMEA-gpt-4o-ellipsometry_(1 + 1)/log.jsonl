{"id": "8e727bae-f980-44cb-a136-3840f0ac022e", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = self.measure()\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "A novel \"Quantum-Inspired Evolutionary Algorithm\" (QIEA) combining principles of quantum computing with evolutionary strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.031955686207194134, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.032 with standard deviation 0.001. And the mean value of best solutions found was 19.143 (0. is the best) with standard deviation 0.158.", "error": "", "parent_id": null, "metadata": {"aucs": [0.03153949815942547, 0.03301800745004646, 0.03130955301211047], "final_y": [19.101935634796845, 18.972523661638423, 19.35323518626795]}, "mutation_prompt": null}
{"id": "fb7daef5-c011-4301-af52-a4b12631ee0d", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = self.measure()\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved Quantum-Inspired EA with a dynamic population size for better search space exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.06142947602475309, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.061 with standard deviation 0.000. And the mean value of best solutions found was 10.279 (0. is the best) with standard deviation 0.127.", "error": "", "parent_id": "8e727bae-f980-44cb-a136-3840f0ac022e", "metadata": {"aucs": [0.060778835379285634, 0.061930602184290695, 0.06157899051068294], "final_y": [10.434885243398588, 10.123642676978253, 10.278098560091097]}, "mutation_prompt": null}
{"id": "5b964229-b9ae-4fa4-867d-86787e19c029", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved offspring generation by using a Gaussian distribution for more balanced exploration.", "configspace": "", "generation": 2, "fitness": 0.09551487686046863, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.096 with standard deviation 0.003. And the mean value of best solutions found was 4.384 (0. is the best) with standard deviation 0.663.", "error": "", "parent_id": "fb7daef5-c011-4301-af52-a4b12631ee0d", "metadata": {"aucs": [0.09260954258047271, 0.0999460914754483, 0.09398899652548487], "final_y": [4.931151139649033, 3.451584703274525, 4.768701444468835]}, "mutation_prompt": null}
{"id": "0f262522-74dd-47a9-88e5-8be08636207f", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance.", "configspace": "", "generation": 3, "fitness": 0.19487905451698517, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.195 with standard deviation 0.015. And the mean value of best solutions found was 0.515 (0. is the best) with standard deviation 0.157.", "error": "", "parent_id": "5b964229-b9ae-4fa4-867d-86787e19c029", "metadata": {"aucs": [0.18105516972584068, 0.18805318827478357, 0.21552880555033127], "final_y": [0.7147424217762223, 0.500698948839984, 0.3309576866498723]}, "mutation_prompt": null}
{"id": "9ecee55f-5434-4028-b67c-bd84afc3bcff", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n\n        # Map offspring to real values within bounds, adapting scale by fitness diversity\n        fitness_diversity = np.std(self.fitness)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1)) * (1 + 0.1 * fitness_diversity)\n\n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introduce adaptive offspring scaling based on fitness diversity to enhance local exploitation.", "configspace": "", "generation": 4, "fitness": 0.0, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.000 with standard deviation 0.000. And the mean value of best solutions found was inf (0. is the best) with standard deviation nan.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.0, 0.0, 0.0], "final_y": [Infinity, Infinity, Infinity]}, "mutation_prompt": null}
{"id": "7e794f0e-deeb-4129-879a-8923f7e32467", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        # Local search on the best solution\n        best_idx = np.argmin(self.fitness)\n        real_values[best_idx] = np.clip(best_solution + np.random.normal(0, 0.05, self.dim), lb, ub)\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance exploitation by introducing local search on the best solution during evolutionary process.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'best_solution' is not defined\").", "error": "NameError(\"name 'best_solution' is not defined\")", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {}, "mutation_prompt": null}
{"id": "7c0a7be6-38d6-4697-9dcd-15b2226815d5", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1 * np.std(self.population), real_values[mutation_mask].shape)  # Adaptive based on diversity\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Quantum-inspired EA with adaptive scaling based on population diversity.", "configspace": "", "generation": 6, "fitness": 0.11493252032775832, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.115 with standard deviation 0.019. And the mean value of best solutions found was 2.174 (0. is the best) with standard deviation 1.559.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.10866589909823765, 0.14113213650422263, 0.09499952538081469], "final_y": [2.016196911151669, 0.3474947498610052, 4.157692214401258]}, "mutation_prompt": null}
{"id": "7d3b92b2-6b35-42e1-89df-eccbace6d280", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * offspring  # Adjusted mapping to improve exploration\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance with strategic offspring scaling.", "configspace": "", "generation": 7, "fitness": 0.08780219207339372, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.088 with standard deviation 0.001. And the mean value of best solutions found was 4.655 (0. is the best) with standard deviation 0.174.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.08921877576182757, 0.0863127193082125, 0.08787508115014109], "final_y": [4.627806511889092, 4.88024030988557, 4.457248116129248]}, "mutation_prompt": null}
{"id": "1a62e064-4107-4dfa-88c0-574027b2ee28", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance / (1 + np.exp(-fitness_variance))  # Sigmoid adjustment\n\n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Minor adaptation of the mutation rate calculation, incorporating a sigmoid function to balance exploration and exploitation.", "configspace": "", "generation": 8, "fitness": 0.13628885652855813, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.136 with standard deviation 0.001. And the mean value of best solutions found was 0.662 (0. is the best) with standard deviation 0.152.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.13611641655302487, 0.13533967535929303, 0.13741047767335646], "final_y": [0.8749541873868885, 0.5297502225571826, 0.581894765254637]}, "mutation_prompt": null}
{"id": "a06892d7-5e5b-4355-9924-f66c84ba3cf9", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.population_size = self.base_population_size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Levy flight mutation\n        levy_step = np.random.standard_cauchy(size=real_values.shape)\n        levy_mutation = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[levy_mutation] += levy_step[levy_mutation]\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def adapt_population_size(self):\n        \"\"\"Adapt population size based on budget utilization.\"\"\"\n        used_budget_ratio = self.budget / self.base_population_size\n        self.population_size = self.base_population_size + int(used_budget_ratio * 10)\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            self.adapt_population_size()\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration using adaptive population size and a Lévy flight mechanism for mutation.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {}, "mutation_prompt": null}
{"id": "76ab017e-e471-4aa2-b6f4-fe3d4d766e1b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance and iteration progress\n        fitness_variance = np.var(self.fitness)\n        progress_factor = 1 - (sum(self.fitness < np.inf) / self.budget)  # Progress based\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * progress_factor\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Incorporate adaptive adjustment of the mutation rate based on current iteration progress.", "configspace": "", "generation": 10, "fitness": 0.1809141509063851, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.181 with standard deviation 0.013. And the mean value of best solutions found was 0.516 (0. is the best) with standard deviation 0.131.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.19790974659670413, 0.16683698935802838, 0.17799571676442283], "final_y": [0.3377687919437084, 0.650287129975075, 0.5587788983853448]}, "mutation_prompt": null}
{"id": "a93a508e-849d-44e5-84e3-885bba73735d", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        improvement_rate = np.mean(np.diff(np.sort(self.fitness)))\n        mutation_scale = 0.1 if improvement_rate > 0.01 else 0.05\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, mutation_scale, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Adjust mutation scale based on the population's improvement rate to enhance convergence.", "configspace": "", "generation": 11, "fitness": 0.09095959263381444, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.091 with standard deviation 0.009. And the mean value of best solutions found was 5.377 (0. is the best) with standard deviation 1.137.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.08162751177879868, 0.10272788046424175, 0.0885233856584029], "final_y": [6.6900060476472545, 3.917743555717179, 5.523758325691826]}, "mutation_prompt": null}
{"id": "85c0df03-47e1-40ea-8f5c-bfa2ab6b1e9b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            fitness_factor = 1 + 0.05 * (self.fitness[i] - np.min(self.fitness))  # Adaptivity\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01 * fitness_factor)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01 * fitness_factor)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance with adaptive quantum probability adjustment.", "configspace": "", "generation": 12, "fitness": 0.11530813953441654, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.115 with standard deviation 0.003. And the mean value of best solutions found was 2.992 (0. is the best) with standard deviation 0.157.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.11128791115283199, 0.1149315012105584, 0.11970500623985925], "final_y": [3.1943469742467303, 2.969868704567002, 2.812274207876716]}, "mutation_prompt": null}
{"id": "15ec6147-52a4-4259-bca0-be71f33495dd", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        adaptive_variance = 0.1 * (1 - np.min(self.fitness) / (np.max(self.fitness) + 1e-9))  # Adaptive scaling\n        real_values[mutation_mask] += np.random.normal(0, adaptive_variance, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Integrate adaptive scaling for mutation variance to enhance local search.", "configspace": "", "generation": 13, "fitness": 0.06442224835192123, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.064 with standard deviation 0.001. And the mean value of best solutions found was 9.016 (0. is the best) with standard deviation 0.371.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.06478887968452218, 0.0650433092625653, 0.06343455610867621], "final_y": [9.467996898353112, 9.021651360552363, 8.559647477679645]}, "mutation_prompt": null}
{"id": "efeee755-7a48-49fd-b3bc-6cb41849f211", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation with adaptive scaling based on improvement rate\n        improvement_rate = np.mean(self.fitness) - np.min(self.fitness)\n        mutation_scale = 0.1 if improvement_rate < 0.01 else 0.05\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, mutation_scale, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced convergence by introducing adaptive mutation scaling based on fitness improvement rate.", "configspace": "", "generation": 14, "fitness": 0.1522109327685572, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.152 with standard deviation 0.011. And the mean value of best solutions found was 0.861 (0. is the best) with standard deviation 0.160.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.15945483044723263, 0.16047829047112716, 0.1366996773873118], "final_y": [0.8872313593539355, 0.6527676113612085, 1.042322741981862]}, "mutation_prompt": null}
{"id": "7d4bf242-9d09-4cc6-b5a3-66ab64f8f73b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.05 * fitness_variance  # Adjusted scaling factor\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved variance-based mutation by integrating dynamic scaling.", "configspace": "", "generation": 15, "fitness": 0.12630023998999948, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.126 with standard deviation 0.017. And the mean value of best solutions found was 2.531 (0. is the best) with standard deviation 1.026.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.14788475417276092, 0.12388008601391132, 0.10713587978332617], "final_y": [1.259810388923765, 2.5596727046182424, 3.773153769420174]}, "mutation_prompt": null}
{"id": "5b593f28-c07d-455f-ba5b-0ed58e851639", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        scale = 0.1 + 0.05 * np.std(self.fitness)  # Adaptive Gaussian scale\n        offspring = np.clip(np.random.normal(loc=self.q, scale=scale), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved convergence by adaptive Gaussian scale in quantum-inspired offspring generation.", "configspace": "", "generation": 16, "fitness": 0.0, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.000 with standard deviation 0.000. And the mean value of best solutions found was inf (0. is the best) with standard deviation nan.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.0, 0.0, 0.0], "final_y": [Infinity, Infinity, Infinity]}, "mutation_prompt": null}
{"id": "e4451298-f0be-4790-865a-b234a1e173a9", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        scale_factor = 0.2 / (1 + np.exp(-0.1 * self.population_size))  # Adaptive scaling\n        offspring = np.clip(np.random.normal(loc=self.q, scale=scale_factor), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved offspring generation strategy with adaptive Gaussian distribution scaling.", "configspace": "", "generation": 17, "fitness": 0.16708351970644952, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.167 with standard deviation 0.009. And the mean value of best solutions found was 0.837 (0. is the best) with standard deviation 0.205.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.17361673105078923, 0.15461623198786867, 0.17301759608069067], "final_y": [0.6807868163604003, 1.1262880043852244, 0.703497328894738]}, "mutation_prompt": null}
{"id": "73ad7e65-d358-4b42-b48c-60e9c3b965f0", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        improvement_rate = np.mean(self.fitness) / (np.min(self.fitness) + 1e-9)\n        dynamic_mutation_rate = self.mutation_rate + 0.05 * fitness_variance * improvement_rate\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced quantum-inspired algorithm with adaptive mutation scaling based on fitness improvement rate.", "configspace": "", "generation": 18, "fitness": 0.1128457482425923, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.113 with standard deviation 0.007. And the mean value of best solutions found was 0.229 (0. is the best) with standard deviation 0.081.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.11704642675143095, 0.11905031294337354, 0.10244050503297242], "final_y": [0.156461216783442, 0.3419067063863739, 0.1900767850842164]}, "mutation_prompt": null}
{"id": "8b6dfeef-3ef6-4b26-acac-2115ff369421", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate * (1 / (1 + fitness_variance))  # Inverse scaling\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Refined dynamic mutation by scaling it with the inverse of fitness variance for enhanced convergence stability.", "configspace": "", "generation": 19, "fitness": 0.09297703195102669, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.093 with standard deviation 0.002. And the mean value of best solutions found was 3.894 (0. is the best) with standard deviation 0.297.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.09366468690836205, 0.0952805634694932, 0.08998584547522481], "final_y": [4.003715940596711, 3.4882499031748093, 4.1908303697426685]}, "mutation_prompt": null}
{"id": "401fee1f-996f-494a-b8d4-14ba23543cc0", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.03 * budget))  # Increased dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance with adaptive population scaling. ", "configspace": "", "generation": 20, "fitness": 0.134428548837749, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.134 with standard deviation 0.022. And the mean value of best solutions found was 1.824 (0. is the best) with standard deviation 0.664.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.12351145776964456, 0.11482166443661679, 0.1649525243069856], "final_y": [2.2043676841286746, 2.3768552183354985, 0.8905020998767368]}, "mutation_prompt": null}
{"id": "cc96c1f2-b237-4493-b670-d7d3ff1d3f8c", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        improvement_factor = np.abs(self.fitness - np.min(self.fitness)) / (np.max(self.fitness) - np.min(self.fitness) + 1e-10)\n        mutation_mask = np.random.rand(*real_values.shape) < (dynamic_mutation_rate * improvement_factor)\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introducing adaptive mutation scaled by fitness improvement to enhance exploration.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (20,2) (20,) ').", "error": "ValueError('operands could not be broadcast together with shapes (20,2) (20,) ')", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {}, "mutation_prompt": null}
{"id": "24b6363b-b012-47f9-9c0a-7e92c1404be7", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Adaptive scaling factor for mutation\n        improvement_rate = (np.min(self.fitness) - np.mean(self.fitness)) / np.std(self.fitness)\n        scaling_factor = 1.0 + 0.2 * improvement_rate\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += scaling_factor * np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance mutation with adaptive scaling based on fitness improvement rate.", "configspace": "", "generation": 22, "fitness": 0.16726566197174988, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.167 with standard deviation 0.010. And the mean value of best solutions found was 0.575 (0. is the best) with standard deviation 0.321.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.1547507240010052, 0.16750667743576553, 0.17953958447847895], "final_y": [1.0044507120480117, 0.48667727880430683, 0.23421073713670998]}, "mutation_prompt": null}
{"id": "335160e0-4aac-480f-833a-1b3000088a88", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1  # Fraction of top solutions to preserve\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05  # adaptive learning rate\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Incorporate adaptive learning rates for quantum probabilities and incorporate elitism to preserve top solutions.", "configspace": "", "generation": 23, "fitness": 0.2010610936938998, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.201 with standard deviation 0.015. And the mean value of best solutions found was 0.275 (0. is the best) with standard deviation 0.130.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.22071798180055247, 0.18461950575879738, 0.19784579352234954], "final_y": [0.14757202662217128, 0.4527518187392816, 0.22360977202287005]}, "mutation_prompt": null}
{"id": "3e4e55a8-39bb-40df-8029-6f30674fc2ea", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1  # Fraction of top solutions to preserve\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05 * (1 - np.std(self.fitness) / np.mean(self.fitness))  # adaptive learning rate\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - np.std(self.fitness) / np.mean(self.fitness))\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introduce self-adaptive adjustment of mutation and learning rates based on fitness convergence to enhance exploration-exploitation balance.", "configspace": "", "generation": 24, "fitness": 0.1686239013162081, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.169 with standard deviation 0.010. And the mean value of best solutions found was 0.981 (0. is the best) with standard deviation 0.229.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.1791456504377531, 0.15500365968069962, 0.17172239383017163], "final_y": [0.7515497808399607, 1.2937163003864551, 0.8964808677636735]}, "mutation_prompt": null}
{"id": "b6a447c0-dc8f-4481-9e0d-8db3cc6d2e7c", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1  # Fraction of top solutions to preserve\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        fitness_variance = np.var(self.fitness)\n        learning_rate = 0.05 + 0.05 * fitness_variance  # adaptive learning rate with variance\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improve exploration by adjusting quantum probability learning dynamically based on fitness variance.", "configspace": "", "generation": 25, "fitness": 0.11781356568213135, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.118 with standard deviation 0.015. And the mean value of best solutions found was 3.160 (0. is the best) with standard deviation 0.959.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.11391019672537561, 0.1377890403904396, 0.10174145993057881], "final_y": [3.270202915276568, 1.9345836930556914, 4.276240973850355]}, "mutation_prompt": null}
{"id": "ee206bc7-c36d-4009-a935-6e97f49cdae1", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1  # Fraction of top solutions to preserve\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05  # adaptive learning rate\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate * (1 + 0.1 * fitness_variance)  # Adaptive mutation adjustment\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introduce adaptive learning for mutation rate based on fitness improvement to enhance exploration.", "configspace": "", "generation": 26, "fitness": 0.10789871470195922, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.108 with standard deviation 0.008. And the mean value of best solutions found was 3.444 (0. is the best) with standard deviation 0.693.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.11022483686365869, 0.09767808089909169, 0.11579322634312728], "final_y": [3.2255247526592123, 4.380225213720254, 2.7259103161326625]}, "mutation_prompt": null}
{"id": "bb8df0b1-69bb-404f-a795-faa5a931a8a1", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.base_population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.base_population_size, self.dim))\n        self.fitness = np.full(self.base_population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        fitness_variance = np.var(self.fitness)\n        learning_rate = 0.05 + 0.1 * fitness_variance\n        for i in range(self.base_population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        current_population_size = self.base_population_size + int(0.05 * self.budget)\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.base_population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introduce adaptive population size and dynamic learning rates for quantum probabilities based on fitness variance.", "configspace": "", "generation": 27, "fitness": 0.09188612876973101, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.092 with standard deviation 0.004. And the mean value of best solutions found was 5.190 (0. is the best) with standard deviation 0.437.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.08880660217289449, 0.09686822003581652, 0.08998356410048203], "final_y": [5.629483440334691, 4.594510761766089, 5.346410399029462]}, "mutation_prompt": null}
{"id": "5f509afd-a483-4d57-bcfb-bcd9e5c4b987", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(12, int(0.02 * budget))  # Adjusted population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)\n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05\n        cosine_factor = np.cos(np.linspace(0, np.pi, self.population_size))\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate * cosine_factor[i])\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def chaotic_perturbation(self, values, lb, ub):\n        perturbation = 0.01 * (ub - lb) * np.sin(100 * values) \n        return np.clip(values + perturbation, lb, ub)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)\n        real_values = self.chaotic_perturbation(real_values, lb, ub)  # Apply chaotic perturbation\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance quantum probabilities using cosine-based adaptation and integrate a chaotic perturbation strategy to avoid local optima.", "configspace": "", "generation": 28, "fitness": 0.18338409056601992, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.183 with standard deviation 0.016. And the mean value of best solutions found was 0.588 (0. is the best) with standard deviation 0.190.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.1696381726112094, 0.17431269966546414, 0.20620139942138627], "final_y": [0.782779065953809, 0.6494388465098613, 0.3306347545186161]}, "mutation_prompt": null}
{"id": "dc86ec72-4045-47c0-b146-01d773945253", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)  # Changed line to adjust mutation rate based on best fitness.\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - best_fitness)\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improve quantum-inspired evolutionary algorithm by adjusting mutation rate based on the best solution's fitness.", "configspace": "", "generation": 29, "fitness": 0.20536720360473434, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.205 with standard deviation 0.003. And the mean value of best solutions found was 0.284 (0. is the best) with standard deviation 0.034.", "error": "", "parent_id": "335160e0-4aac-480f-833a-1b3000088a88", "metadata": {"aucs": [0.20913852062725546, 0.20533750908919401, 0.20162558109775353], "final_y": [0.24421596459290462, 0.2796809402259969, 0.32742437306502514]}, "mutation_prompt": null}
{"id": "b4721d9e-a5b5-49c1-807e-cc107a1cc88b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n        self.no_improvement_count = 0  # Line 1: Adding a counter for convergence stalling\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)  # Changed line to adjust mutation rate based on best fitness.\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - best_fitness)\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            if self.fitness[best_idx] == np.min(self.fitness):  # Line 2: Check for improvement\n                self.no_improvement_count += 1\n            else:\n                self.no_improvement_count = 0\n            \n            if self.no_improvement_count > 5:  # Reinitialize if convergence stalls\n                self.initialize_population(lb, ub)\n                self.no_improvement_count = 0\n                \n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Refine quantum-inspired evolutionary algorithm by introducing diversity maintenance through random reinitialization when convergence stalls.", "configspace": "", "generation": 30, "fitness": 0.15246853930863322, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.152 with standard deviation 0.014. And the mean value of best solutions found was 1.449 (0. is the best) with standard deviation 0.408.", "error": "", "parent_id": "dc86ec72-4045-47c0-b146-01d773945253", "metadata": {"aucs": [0.14893207665020958, 0.13739873267950087, 0.17107480859618918], "final_y": [1.5038441778144351, 1.9188717920645513, 0.9241942469409912]}, "mutation_prompt": null}
{"id": "8b37f783-3519-47a4-8fda-ec59e2cf3a30", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution, convergence_speed):\n        learning_rate = 0.05 + 0.1 * convergence_speed  # Adapt learning rate\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - best_fitness)\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.05 + 0.15 * (1 - best_fitness), real_values[mutation_mask].shape)  # Guided mutation\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        previous_best = np.inf\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            convergence_speed = abs(previous_best - self.fitness[best_idx]) / previous_best\n            previous_best = self.fitness[best_idx]\n            self.update_quantum_probabilities(best_solution, convergence_speed)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance Quantum-Inspired EA by incorporating adaptive learning rates and a guided mutation strategy based on convergence speed.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "dc86ec72-4045-47c0-b146-01d773945253", "metadata": {}, "mutation_prompt": null}
{"id": "70f8cfe9-7784-4d68-833e-3e63890e8dd4", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - best_fitness)\n        \n        mutation_scale = max(0.1, min(0.5, 0.1 + fitness_variance))  # Adjusted mutation scale\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, mutation_scale, real_values[mutation_mask].shape)  # Applied mutation scale\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Refine quantum-inspired evolutionary algorithm by enhancing population diversity through adaptive mutation scale based on fitness variance.", "configspace": "", "generation": 32, "fitness": 0.13496328395179127, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.135 with standard deviation 0.005. And the mean value of best solutions found was 1.466 (0. is the best) with standard deviation 0.757.", "error": "", "parent_id": "dc86ec72-4045-47c0-b146-01d773945253", "metadata": {"aucs": [0.1354199782183957, 0.1406440346486696, 0.12882583898830857], "final_y": [1.8509114632877284, 0.4087851426477294, 2.1378189378553687]}, "mutation_prompt": null}
{"id": "3c34737d-a4d7-454e-9210-f84b70fd4a26", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        learning_rate = 0.05\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + learning_rate)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - learning_rate)\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.15 * fitness_variance * (1 - best_fitness)  # Adjusted line.\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance quantum-inspired evolutionary algorithm by refining the dynamic mutation rate calculation to further exploit the fitness variance.", "configspace": "", "generation": 33, "fitness": 0.09854059943616474, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.099 with standard deviation 0.005. And the mean value of best solutions found was 4.610 (0. is the best) with standard deviation 0.533.", "error": "", "parent_id": "dc86ec72-4045-47c0-b146-01d773945253", "metadata": {"aucs": [0.09190660277908824, 0.0987601376288143, 0.10495505790059168], "final_y": [5.298936184388005, 4.530529249914782, 4.001156103602925]}, "mutation_prompt": null}
{"id": "2d49bd77-e90a-454b-9c9a-f968ee57baf8", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  \n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  \n        self.elite_fraction = 0.1\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n        self.elites = []\n\n    def measure(self):\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        fitness_variance = np.var(self.fitness)  # Added line\n        dynamic_learning_rate = 0.05 + 0.1 * fitness_variance  # Modified line\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + dynamic_learning_rate)  # Modified line\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - dynamic_learning_rate)  # Modified line\n\n    def evolutionary_process(self, lb, ub):\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        fitness_variance = np.var(self.fitness)\n        \n        best_fitness = np.min(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * (1 - best_fitness)\n\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  \n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            combined_population = np.vstack((self.population, new_population))\n            combined_fitness = np.hstack((self.fitness, new_fitness))\n            best_indices = np.argsort(combined_fitness)[:self.population_size]\n            \n            self.population = combined_population[best_indices]\n            self.fitness = combined_fitness[best_indices]\n            \n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance quantum-inspired evolutionary algorithm by dynamically adjusting learning rate based on fitness variance.", "configspace": "", "generation": 34, "fitness": 0.09193720251623834, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.092 with standard deviation 0.009. And the mean value of best solutions found was 5.280 (0. is the best) with standard deviation 1.067.", "error": "", "parent_id": "dc86ec72-4045-47c0-b146-01d773945253", "metadata": {"aucs": [0.08870766745296421, 0.08240051184241926, 0.10470342825333157], "final_y": [5.26214895377282, 6.595636494488289, 3.981929821764699]}, "mutation_prompt": null}
