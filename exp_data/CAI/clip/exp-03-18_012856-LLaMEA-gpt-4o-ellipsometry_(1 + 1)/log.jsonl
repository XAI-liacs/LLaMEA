{"id": "8e727bae-f980-44cb-a136-3840f0ac022e", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = self.measure()\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "A novel \"Quantum-Inspired Evolutionary Algorithm\" (QIEA) combining principles of quantum computing with evolutionary strategies to efficiently explore and exploit the search space.", "configspace": "", "generation": 0, "fitness": 0.031955686207194134, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.032 with standard deviation 0.001. And the mean value of best solutions found was 19.143 (0. is the best) with standard deviation 0.158.", "error": "", "parent_id": null, "metadata": {"aucs": [0.03153949815942547, 0.03301800745004646, 0.03130955301211047], "final_y": [19.101935634796845, 18.972523661638423, 19.35323518626795]}, "mutation_prompt": null}
{"id": "fb7daef5-c011-4301-af52-a4b12631ee0d", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = self.measure()\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved Quantum-Inspired EA with a dynamic population size for better search space exploration and exploitation balance.", "configspace": "", "generation": 1, "fitness": 0.06142947602475309, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.061 with standard deviation 0.000. And the mean value of best solutions found was 10.279 (0. is the best) with standard deviation 0.127.", "error": "", "parent_id": "8e727bae-f980-44cb-a136-3840f0ac022e", "metadata": {"aucs": [0.060778835379285634, 0.061930602184290695, 0.06157899051068294], "final_y": [10.434885243398588, 10.123642676978253, 10.278098560091097]}, "mutation_prompt": null}
{"id": "5b964229-b9ae-4fa4-867d-86787e19c029", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < self.mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Improved offspring generation by using a Gaussian distribution for more balanced exploration.", "configspace": "", "generation": 2, "fitness": 0.09551487686046863, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.096 with standard deviation 0.003. And the mean value of best solutions found was 4.384 (0. is the best) with standard deviation 0.663.", "error": "", "parent_id": "fb7daef5-c011-4301-af52-a4b12631ee0d", "metadata": {"aucs": [0.09260954258047271, 0.0999460914754483, 0.09398899652548487], "final_y": [4.931151139649033, 3.451584703274525, 4.768701444468835]}, "mutation_prompt": null}
{"id": "0f262522-74dd-47a9-88e5-8be08636207f", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance.", "configspace": "", "generation": 3, "fitness": 0.19487905451698517, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.195 with standard deviation 0.015. And the mean value of best solutions found was 0.515 (0. is the best) with standard deviation 0.157.", "error": "", "parent_id": "5b964229-b9ae-4fa4-867d-86787e19c029", "metadata": {"aucs": [0.18105516972584068, 0.18805318827478357, 0.21552880555033127], "final_y": [0.7147424217762223, 0.500698948839984, 0.3309576866498723]}, "mutation_prompt": null}
{"id": "9ecee55f-5434-4028-b67c-bd84afc3bcff", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1) \n\n        # Map offspring to real values within bounds, adapting scale by fitness diversity\n        fitness_diversity = np.std(self.fitness)\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1)) * (1 + 0.1 * fitness_diversity)\n\n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Introduce adaptive offspring scaling based on fitness diversity to enhance local exploitation.", "configspace": "", "generation": 4, "fitness": 0.0, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.000 with standard deviation 0.000. And the mean value of best solutions found was inf (0. is the best) with standard deviation nan.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.0, 0.0, 0.0], "final_y": [Infinity, Infinity, Infinity]}, "mutation_prompt": null}
{"id": "7e794f0e-deeb-4129-879a-8923f7e32467", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        # Local search on the best solution\n        best_idx = np.argmin(self.fitness)\n        real_values[best_idx] = np.clip(best_solution + np.random.normal(0, 0.05, self.dim), lb, ub)\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhance exploitation by introducing local search on the best solution during evolutionary process.", "configspace": "", "generation": 5, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'best_solution' is not defined\").", "error": "NameError(\"name 'best_solution' is not defined\")", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {}, "mutation_prompt": null}
{"id": "7c0a7be6-38d6-4697-9dcd-15b2226815d5", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1 * np.std(self.population), real_values[mutation_mask].shape)  # Adaptive based on diversity\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Quantum-inspired EA with adaptive scaling based on population diversity.", "configspace": "", "generation": 6, "fitness": 0.11493252032775832, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.115 with standard deviation 0.019. And the mean value of best solutions found was 2.174 (0. is the best) with standard deviation 1.559.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.10866589909823765, 0.14113213650422263, 0.09499952538081469], "final_y": [2.016196911151669, 0.3474947498610052, 4.157692214401258]}, "mutation_prompt": null}
{"id": "7d3b92b2-6b35-42e1-89df-eccbace6d280", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * offspring  # Adjusted mapping to improve exploration\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance with strategic offspring scaling.", "configspace": "", "generation": 7, "fitness": 0.08780219207339372, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.088 with standard deviation 0.001. And the mean value of best solutions found was 4.655 (0. is the best) with standard deviation 0.174.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.08921877576182757, 0.0863127193082125, 0.08787508115014109], "final_y": [4.627806511889092, 4.88024030988557, 4.457248116129248]}, "mutation_prompt": null}
{"id": "1a62e064-4107-4dfa-88c0-574027b2ee28", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance / (1 + np.exp(-fitness_variance))  # Sigmoid adjustment\n\n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Minor adaptation of the mutation rate calculation, incorporating a sigmoid function to balance exploration and exploitation.", "configspace": "", "generation": 8, "fitness": 0.13628885652855813, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.136 with standard deviation 0.001. And the mean value of best solutions found was 0.662 (0. is the best) with standard deviation 0.152.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.13611641655302487, 0.13533967535929303, 0.13741047767335646], "final_y": [0.8749541873868885, 0.5297502225571826, 0.581894765254637]}, "mutation_prompt": null}
{"id": "a06892d7-5e5b-4355-9924-f66c84ba3cf9", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.base_population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.population_size = self.base_population_size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Levy flight mutation\n        levy_step = np.random.standard_cauchy(size=real_values.shape)\n        levy_mutation = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[levy_mutation] += levy_step[levy_mutation]\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def adapt_population_size(self):\n        \"\"\"Adapt population size based on budget utilization.\"\"\"\n        used_budget_ratio = self.budget / self.base_population_size\n        self.population_size = self.base_population_size + int(used_budget_ratio * 10)\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            self.adapt_population_size()\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration using adaptive population size and a Lévy flight mechanism for mutation.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 20 is out of bounds for axis 0 with size 20').", "error": "IndexError('index 20 is out of bounds for axis 0 with size 20')", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {}, "mutation_prompt": null}
{"id": "76ab017e-e471-4aa2-b6f4-fe3d4d766e1b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance and iteration progress\n        fitness_variance = np.var(self.fitness)\n        progress_factor = 1 - (sum(self.fitness < np.inf) / self.budget)  # Progress based\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance * progress_factor\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Incorporate adaptive adjustment of the mutation rate based on current iteration progress.", "configspace": "", "generation": 10, "fitness": 0.1809141509063851, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.181 with standard deviation 0.013. And the mean value of best solutions found was 0.516 (0. is the best) with standard deviation 0.131.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.19790974659670413, 0.16683698935802838, 0.17799571676442283], "final_y": [0.3377687919437084, 0.650287129975075, 0.5587788983853448]}, "mutation_prompt": null}
{"id": "a93a508e-849d-44e5-84e3-885bba73735d", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        improvement_rate = np.mean(np.diff(np.sort(self.fitness)))\n        mutation_scale = 0.1 if improvement_rate > 0.01 else 0.05\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, mutation_scale, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Adjust mutation scale based on the population's improvement rate to enhance convergence.", "configspace": "", "generation": 11, "fitness": 0.09095959263381444, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.091 with standard deviation 0.009. And the mean value of best solutions found was 5.377 (0. is the best) with standard deviation 1.137.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.08162751177879868, 0.10272788046424175, 0.0885233856584029], "final_y": [6.6900060476472545, 3.917743555717179, 5.523758325691826]}, "mutation_prompt": null}
{"id": "85c0df03-47e1-40ea-8f5c-bfa2ab6b1e9b", "solution": "import numpy as np\n\nclass QuantumInspiredEA:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = max(10, int(0.02 * budget))  # Dynamic population size\n        self.mutation_rate = 0.1\n        self.q = np.full((self.population_size, dim), 0.5)  # Quantum probabilities\n\n    def initialize_population(self, lb, ub):\n        self.population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        self.fitness = np.full(self.population_size, np.inf)\n\n    def measure(self):\n        \"\"\"Measure operation in quantum computing to collapse states.\"\"\"\n        return np.where(np.random.rand(*self.q.shape) < self.q, 1, 0)\n\n    def update_quantum_probabilities(self, best_solution):\n        \"\"\"Update quantum probabilities based on the best solution.\"\"\"\n        for i in range(self.population_size):\n            fitness_factor = 1 + 0.05 * (self.fitness[i] - np.min(self.fitness))  # Adaptivity\n            for j in range(self.dim):\n                if self.population[i, j] == best_solution[j]:\n                    self.q[i, j] = min(0.9, self.q[i, j] + 0.01 * fitness_factor)\n                else:\n                    self.q[i, j] = max(0.1, self.q[i, j] - 0.01 * fitness_factor)\n\n    def evolutionary_process(self, lb, ub):\n        \"\"\"Perform evolutionary operations.\"\"\"\n        # Quantum-inspired offspring generation\n        offspring = np.clip(np.random.normal(loc=self.q, scale=0.1), 0, 1)  # Gaussian-based measure\n        \n        # Map offspring to real values within bounds\n        real_values = lb + (ub - lb) * (offspring / (self.q.shape[1] - 1))\n        \n        # Dynamic mutation rate based on fitness variance\n        fitness_variance = np.var(self.fitness)\n        dynamic_mutation_rate = self.mutation_rate + 0.1 * fitness_variance\n        \n        # Mutation\n        mutation_mask = np.random.rand(*real_values.shape) < dynamic_mutation_rate\n        real_values[mutation_mask] += np.random.normal(0, 0.1, real_values[mutation_mask].shape)\n        np.clip(real_values, lb, ub, out=real_values)  # Ensure within bounds\n\n        return real_values\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        self.initialize_population(lb, ub)\n        eval_count = 0\n        \n        while eval_count < self.budget:\n            new_population = self.evolutionary_process(lb, ub)\n            new_fitness = np.apply_along_axis(func, 1, new_population)\n            eval_count += len(new_fitness)\n\n            # Selection: Replace if offspring are better\n            better_indices = new_fitness < self.fitness\n            self.population[better_indices] = new_population[better_indices]\n            self.fitness[better_indices] = new_fitness[better_indices]\n\n            # Update quantum probabilities\n            best_idx = np.argmin(self.fitness)\n            best_solution = self.population[best_idx]\n            self.update_quantum_probabilities(best_solution)\n\n        best_idx = np.argmin(self.fitness)\n        return self.population[best_idx], self.fitness[best_idx]", "name": "QuantumInspiredEA", "description": "Enhanced exploration by dynamic mutation based on fitness variance with adaptive quantum probability adjustment.", "configspace": "", "generation": 12, "fitness": 0.11530813953441654, "feedback": "The algorithm QuantumInspiredEA got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.115 with standard deviation 0.003. And the mean value of best solutions found was 2.992 (0. is the best) with standard deviation 0.157.", "error": "", "parent_id": "0f262522-74dd-47a9-88e5-8be08636207f", "metadata": {"aucs": [0.11128791115283199, 0.1149315012105584, 0.11970500623985925], "final_y": [3.1943469742467303, 2.969868704567002, 2.812274207876716]}, "mutation_prompt": null}
