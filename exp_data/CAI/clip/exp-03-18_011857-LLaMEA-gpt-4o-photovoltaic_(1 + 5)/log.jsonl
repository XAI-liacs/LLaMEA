{"id": "d4fc568c-ce04-4694-9b3a-d00686ec6bc7", "solution": "import numpy as np\n\nclass HybridPSOSimulatedAnnealing:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 40\n        self.temperature = 100.0\n        self.cooling_rate = 0.99\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        X = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        V = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best = X.copy()\n        personal_best_values = np.array([func(x) for x in X])\n        global_best = personal_best[np.argmin(personal_best_values)]\n        global_best_value = np.min(personal_best_values)\n        \n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            r1, r2 = np.random.rand(2)\n            V = self.w * V + \\\n                self.c1 * r1 * (personal_best - X) + \\\n                self.c2 * r2 * (global_best - X)\n            X = np.clip(X + V, lb, ub)\n\n            # Simulated Annealing step\n            for i in range(self.population_size):\n                candidate = X[i] + np.random.uniform(-1, 1, self.dim) * (ub - lb) * self.temperature\n                candidate = np.clip(candidate, lb, ub)\n                candidate_value = func(candidate)\n                evaluations += 1\n\n                if candidate_value < personal_best_values[i]:\n                    personal_best[i] = candidate\n                    personal_best_values[i] = candidate_value\n\n                    if candidate_value < global_best_value:\n                        global_best = candidate\n                        global_best_value = candidate_value\n                elif np.exp((personal_best_values[i] - candidate_value) / self.temperature) > np.random.rand():\n                    personal_best[i] = candidate\n                    personal_best_values[i] = candidate_value\n\n            if evaluations >= self.budget:\n                break\n\n            self.temperature *= self.cooling_rate\n\n        return global_best", "name": "HybridPSOSimulatedAnnealing", "description": "A hybrid Particle Swarm Optimization and Simulated Annealing algorithm that adapts search strategies to balance exploration and exploitation for black-box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.7494561386728357, "feedback": "The algorithm HybridPSOSimulatedAnnealing got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.749 with standard deviation 0.042. And the mean value of best solutions found was 0.178 (0. is the best) with standard deviation 0.018.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6927044170144536, 0.7945901820562783, 0.7610738169477751], "final_y": [0.20241640769719016, 0.1601017669387199, 0.17296403364081692]}, "mutation_prompt": null}
