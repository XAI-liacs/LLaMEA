{"id": "7df4c885-3487-4ad0-88e8-2ecc603543f1", "solution": "import numpy as np\n\nclass HybridGOA_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.population_size = 20  # Number of grasshoppers\n        self.c = 0.00001  # Convergence constant\n        self.f_min, self.f_max = 0.00001, 1.0  # Attraction intensity range\n        self.elite_rate = 0.2  # The proportion of elite solutions for DE\n\n    def __call__(self, func):\n        lb, ub = func.bounds.lb, func.bounds.ub\n        population = np.random.uniform(lb, ub, (self.population_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            f = self.f_max - evaluations / self.budget * (self.f_max - self.f_min)\n            c_i = self.c * np.power(f, 2)\n\n            new_population = np.zeros_like(population)\n            for i in range(self.population_size):\n                s_i = np.zeros(self.dim)\n                for j in range(self.population_size):\n                    if i != j:\n                        r_ij = np.linalg.norm(population[j] - population[i])\n                        s_ij = (population[j] - population[i]) * np.exp(-r_ij/self.f_max)\n                        s_i += s_ij\n                new_position = c_i * s_i + population[i]\n                new_population[i] = np.clip(new_position, lb, ub)\n\n            new_fitness = np.array([func(ind) for ind in new_population])\n            evaluations += self.population_size\n\n            # Differential Evolution step on the top elite_rate percent solutions\n            elite_count = max(1, int(self.population_size * self.elite_rate))\n            elite_indices = np.argsort(fitness)[:elite_count]\n            elite_solutions = population[elite_indices]\n            for idx in elite_indices:\n                a, b, c = elite_solutions[np.random.choice(elite_count, 3, replace=False)]\n                mutant = np.clip(a + 0.8 * (b - c), lb, ub)\n                trial = np.where(np.random.rand(self.dim) < 0.9, mutant, new_population[idx])\n                trial_fitness = func(trial)\n                evaluations += 1\n                if trial_fitness < new_fitness[idx]:\n                    new_population[idx] = trial\n                    new_fitness[idx] = trial_fitness\n\n            # Update population and fitness\n            population = new_population\n            fitness = new_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx], fitness[best_idx]", "name": "HybridGOA_DE", "description": "A hybrid Grasshopper Optimization Algorithm (GOA) combined with a Differential Evolution (DE) strategy for enhanced exploration and exploitation in black box optimization.", "configspace": "", "generation": 0, "fitness": 0.8119488668054929, "feedback": "The algorithm HybridGOA_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.812 with standard deviation 0.033. And the mean value of best solutions found was 0.141 (0. is the best) with standard deviation 0.012.", "error": "", "parent_id": null, "metadata": {"aucs": [0.7770025852439605, 0.8553019528551533, 0.8035420623173655], "final_y": [0.1572232861474393, 0.12978249073475956, 0.13498667603997672]}, "mutation_prompt": null}
